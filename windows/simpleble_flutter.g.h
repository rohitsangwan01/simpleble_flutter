// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_SIMPLEBLE_FLUTTER_G_H_
#define PIGEON_SIMPLEBLE_FLUTTER_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace simpleble_flutter {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class SimpleBlePlatformChannel;
  friend class SimpleBleCallbackChannel;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class SimpleBleScanResult {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit SimpleBleScanResult(const std::string& device_id);

  // Constructs an object setting all fields.
  explicit SimpleBleScanResult(
    const std::string& device_id,
    const std::string* name,
    const std::vector<uint8_t>* manufacturer_data,
    const int64_t* rssi);

  const std::string& device_id() const;
  void set_device_id(std::string_view value_arg);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);

  const std::vector<uint8_t>* manufacturer_data() const;
  void set_manufacturer_data(const std::vector<uint8_t>* value_arg);
  void set_manufacturer_data(const std::vector<uint8_t>& value_arg);

  const int64_t* rssi() const;
  void set_rssi(const int64_t* value_arg);
  void set_rssi(int64_t value_arg);


 private:
  static SimpleBleScanResult FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SimpleBlePlatformChannel;
  friend class SimpleBlePlatformChannelCodecSerializer;
  friend class SimpleBleCallbackChannel;
  friend class SimpleBleCallbackChannelCodecSerializer;
  std::string device_id_;
  std::optional<std::string> name_;
  std::optional<std::vector<uint8_t>> manufacturer_data_;
  std::optional<int64_t> rssi_;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class SimpleBlePlatformChannel {
 public:
  SimpleBlePlatformChannel(const SimpleBlePlatformChannel&) = delete;
  SimpleBlePlatformChannel& operator=(const SimpleBlePlatformChannel&) = delete;
  virtual ~SimpleBlePlatformChannel() {}
  virtual ErrorOr<bool> IsBluetoothAvailable() = 0;
  virtual std::optional<FlutterError> StartScan() = 0;
  virtual std::optional<FlutterError> StopScan() = 0;
  virtual std::optional<FlutterError> Connect(const std::string& device_id) = 0;
  virtual std::optional<FlutterError> Disconnect(const std::string& device_id) = 0;
  virtual ErrorOr<flutter::EncodableList> DiscoverServices(const std::string& device_id) = 0;
  virtual std::optional<FlutterError> SetNotifiable(
    const std::string& device_id,
    const std::string& service,
    const std::string& characteristic,
    int64_t ble_input_property) = 0;
  virtual ErrorOr<std::vector<uint8_t>> ReadValue(
    const std::string& device_id,
    const std::string& service,
    const std::string& characteristic) = 0;
  virtual std::optional<FlutterError> WriteValue(
    const std::string& device_id,
    const std::string& service,
    const std::string& characteristic,
    const std::vector<uint8_t>& value,
    int64_t ble_output_property) = 0;
  virtual ErrorOr<int64_t> RequestMtu(
    const std::string& device_id,
    int64_t expected_mtu) = 0;

  // The codec used by SimpleBlePlatformChannel.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `SimpleBlePlatformChannel` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    SimpleBlePlatformChannel* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  SimpleBlePlatformChannel() = default;

};
class SimpleBleCallbackChannelCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  SimpleBleCallbackChannelCodecSerializer();
  inline static SimpleBleCallbackChannelCodecSerializer& GetInstance() {
    static SimpleBleCallbackChannelCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class SimpleBleCallbackChannel {
 public:
  SimpleBleCallbackChannel(flutter::BinaryMessenger* binary_messenger);
  static const flutter::StandardMessageCodec& GetCodec();
  void OnScanResult(
    const SimpleBleScanResult& result,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnConnectionChanged(
    const std::string& device_id,
    int64_t state,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnValueChanged(
    const std::string& device_id,
    const std::string& characteristic_id,
    const std::vector<uint8_t>& value,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);

 private:
  flutter::BinaryMessenger* binary_messenger_;
};

}  // namespace simpleble_flutter
#endif  // PIGEON_SIMPLEBLE_FLUTTER_G_H_
